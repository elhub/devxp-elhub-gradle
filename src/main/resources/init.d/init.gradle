import com.adarshr.gradle.testlogger.theme.ThemeType
import org.jfrog.gradle.plugin.artifactory.dsl.PublisherConfig
import org.jetbrains.kotlin.gradle.dsl.KotlinCompile

initscript {

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.38.0"
        classpath "com.adarshr:gradle-test-logger-plugin:3.0.0"
        classpath "io.qameta.allure:allure-gradle:2.8.1"
        classpath "gradle.plugin.com.eden:orchidPlugin:0.21.1"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.21.0"
    }

}

allprojects {
    apply plugin: org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin
    apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin
    apply plugin: 'jacoco'
    apply plugin: com.adarshr.gradle.testlogger.TestLoggerPlugin
    apply plugin: io.qameta.allure.gradle.AllurePlugin
    apply plugin: com.eden.orchid.gradle.OrchidPlugin
    apply plugin: org.jfrog.gradle.plugin.artifactory.ArtifactoryPlugin
    apply plugin: 'maven-publish'

    repositories {
        maven {
            url "https://jfrog.elhub.cloud/artifactory/elhub-mvn/"
        }
    }

    dependencies {
        orchidRuntimeOnly 'io.github.javaeden.orchid:OrchidAll:0.21.1'
    }


    /*
     * Compile setup
     */
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
        }
    }

    /*
     * Test setup
     */
    test {
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed")
            showStandardStreams = true
        }
    }

    jacoco {
        toolVersion = '0.8.4' // Has to be the same as TeamCity
    }

    tasks.test {
        finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
    }

    tasks.jacocoTestReport {
        dependsOn(tasks.test) // tests are required to run before generating the report
    }

    testlogger {
        theme = ThemeType.MOCHA
    }

    def allureVersion = "2.16.1" // Version of the allure client

    allure {
        version = allureVersion
        autoconfigure = false
        aspectjweaver = true
        useJUnit5 {
            version = allureVersion
        }
        downloadLink = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/" +
                "${allureVersion}/allure-commandline-${allureVersion}.zip"
    }

    /*
     * Orchid
     */
    orchid {
        theme = "Elhub"
        srcDir = "docs"
        destDir = "build/docs/orchid"
    }

    /*
     * Publishing
     */
    artifactoryPublish {
        skip = false //Skip build info analysis and publishing (false by default)
        contextUrl = 'http://repo.myorg.com/artifactory'
        publications('a', 'b', 'c')
        properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']
        properties {
            c '**:**:**:*@*', cProperty: 'only in c'
        }
        clientConfig.publisher.repoKey = 'integration-libs'
        clientConfig.publisher.username = 'deployer'
        clientConfig.publisher.password = 'deployerPaS'

        // Minimum file size in KB for which the plugin performs checksum deploy optimization. Default: 10. Set to 0 to disable uploading files with checksum that already exists in Artifactory.
        clientConfig.publisher.minChecksumDeploySizeKb = 10
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    artifactory {
        contextUrl = project.findProperty('artifactoryUri') ?: "http://jfrog.example.com/artifactory"
        publish {
            repository {
                repoKey = project.findProperty('artifactoryRepository') ?: "unknownrepo"
                username = project.findProperty('artifactoryUsername') ?: "nouser"
                password =  project.findProperty('artifactoryPassword') ?: "nopass"
            }
            defaults {
                publications('mavenJava')
                publishBuildInfo = (project.findProperty('artifactoryUsername') == "teamcity")
                publishArtifacts = true
                publishPom = true
            }
        }
        resolve {
            repoKey = "repo"
        }
    }

    tasks["artifactoryPublish"].dependsOn(tasks["assemble"])

    tasks["publish"].dependsOn(tasks["artifactoryPublish"])

    /*
     * TeamCity
     */
    tasks.register('teamCity', Exec) {
        workingDir '.teamcity'
        commandLine 'mvn', 'compile'
        description 'Compile the TeamCity settings'
    }

}
